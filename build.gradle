buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "io.freefair.gradle:lombok-plugin:6.5.1"
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "io.freefair.lombok"

version = "${tjskc_version}"
group = 'chiefarug.mods.tinkerjs_kubstruct' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tinkerjs_kubstruct'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'tinkerjs_kubstruct'
            // fix refmaps for kubejs
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tinkerjs_kubstruct {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'tinkerjs_kubstruct'
            // fix refmaps for kubejs
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tinkerjs_kubstruct {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'tinkerjs_kubstruct'
            // fix refmaps for kubejs
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"


            mods {
                tinkerjs_kubstruct {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // fix refmaps for kubejs
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"


            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'tinkerjs_kubstruct', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tinkerjs_kubstruct {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name 'DVS1 Maven FS' // Tinkers
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Shedaniels maven' // Architectury
        url "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        name 'saps.dev Maven' // KubeJS & Rhino
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_version}")

    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "tinkerjs_kubstruct",
                "Specification-Vendor"    : "ChiefArug",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : tjskc_version,
                "Implementation-Vendor"   : "ChiefArug",
        ])
    }
}

// Below is modified from from tinkers build.gradle. Thank you!
def modsTomlSpec = copySpec {
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'tjskc_version': tjskc_version,
            'minecraft_range': minecraft_range,
            'forge_range': forge_range,
            'tinkers_range': tinkers_range,
            'kubejs_range': kubejs_range
    }
}

def buildPaths = [
    "$rootDir/out/production/resources", //IDEA - updated
    "$rootDir/bin", // Eclipse
]

task replaceResources {
    // ensure directory exists, first build likes to fail
    new File("${processResources.destinationDir}/META-INF").mkdirs()
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy 'reobfJar'


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
